<?xml version="1.0" encoding="UTF-8"?>
<!--
    This file stores bootstrap properties needed by Openfire.
    Property names must be in the format: "prop.name.is.blah=value"
    That will be stored as:
        <prop>
            <name>
                <is>
                    <blah>value</blah>
                </is>
            </name>
        </prop>

    Most properties are stored in the Openfire database. A
    property viewer and editor is included in the admin console.
-->
<!-- root element, all properties must be under this element -->
<jive>
    <adminConsole>
        <!-- Disable either port by setting the value to -1 -->
        <port>9090</port>
        <securePort>9091</securePort>
    </adminConsole>

    <locale>en</locale>

    <!-- Network settings. By default, Openfire will bind to all network interfaces.
      Alternatively, you can specify a specific network interfaces that the server
      will listen on. For example, 127.0.0.1. This setting is generally only useful
       on multi-homed servers. -->
    <!--
    <network>
        <interface></interface>
    </network>
    -->

    <!-- SPDY  Protocol is npn.
        (note: npn does not work with Java 8)
        add -Xbootclasspath/p:/OPENFIRE_HOME/lib/npn-boot.jar to .vmoptions file    -->

    <!--
    <spdy>
        <protocol>npn</protocol>
    </spdy>
    -->

    <!-- XEP-0198 properties -->
    <stream>
        <management>
            <!-- Whether stream management is offered to clients by server. -->
            <active>true</active>
            <!-- Number of stanzas sent to client before a stream management
                 acknowledgement request is made. -->
            <requestFrequency>5</requestFrequency>
        </management>
    </stream>

    <jdbcProvider>
    	<driver>com.mysql.jdbc.Driver</driver>
    	<connectionString>jdbc:mysql://docker-lamp:3306/arrowtown?user=root&amp;password=111111</connectionString>
        <!--不同数据库，其驱动类和连接字符串是不同的,同时**确保\Openfire\lib路径下有该驱动类的jar包**，如果没有需要手动放入-->
    </jdbcProvider>
    <provider>
        <auth>
            <className>org.jivesoftware.openfire.auth.JDBCAuthProvider</className>
        </auth>
        <user>
            <className>org.jivesoftware.openfire.user.JDBCUserProvider</className>
        </user>
        <admin>
            <className>org.jivesoftware.openfire.admin.JDBCAdminProvider</className>
        </admin>
    </provider>
    <jdbcUserProvider>
        <!--users就是将要集成的用户表-->
        <loadUserSQL>SELECT name,email FROM users WHERE account_id=?</loadUserSQL>
        <userCountSQL>SELECT COUNT(*) FROM users WHERE deleted_at IS NULL</userCountSQL>
        <allUsersSQL>SELECT account_id FROM users WHERE deleted_at IS NULL</allUsersSQL>
        <searchSQL>SELECT account_id FROM users WHERE deleted_at IS NULL AND </searchSQL>
        <!--
            account_id是登录openfire和进行信息通信的账号
            name和email应该是进行聊天时可以显示的昵称和电子邮件。如果不是真正需要，只要和上面的sql语句对应上就可以了
        -->
        <usernameField>account_id</usernameField>
        <nameField>name</nameField>
        <emailField>email</emailField>
    </jdbcUserProvider>
    <jdbcAuthProvider>
        <!--
            pwd是blog_user表中保存密码的字段，须根据自身的表填写
            passwordType需要根据blog_user的加密类型进行选值，有如下几种plain、md5、sha1、sha256、sha512
        -->
        <passwordSQL>SELECT password FROM users WHERE account_id=?</passwordSQL>
        <passwordType>plain</passwordType>
    </jdbcAuthProvider>
    <jdbcAdminProvider>
        <getAdminsSQL>SELECT account_id FROM users WHERE is_admin='1'</getAdminsSQL>
    </jdbcAdminProvider>
    <admin>
        <!--
            设置授权的用户，可以登录到openfire的后台。外部用户表要存在这个用户
            如users中存在了account_id字段为A0000001的一条记录
        -->
        <authorizedUsernames>A0000001</authorizedUsernames>
        <jdbcAdminProvider> 
                <getAdminsSQL>SELECT account_id FROM users WHERE is_admin='1'</getAdminsSQL> 
        </jdbcAdminProvider>
    </admin>

</jive>
